<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAG4AAA1iDQANbg0AAHgAADt8TwAAX3cAHWtoAEt+RACwUVYAsVVYAJxyXgC0ZmQAuGJkALNh
        aAC5amkAv2RyAL91dQDDYWcAxmNsAMxlbQDCaHkAAIoAAACOAAAAjwcAB4wHAACRAAAAkAUABZQFAA2X
        DwAAhhgABYYcABOHHwAKkRMAD5gRABWZFgAbnBwAD4YpABOMIwAZizQAIYwlACuALAA4gToALZgyADKY
        NgAwnz0AIaEiACKhJQAqpSsAMqQ0ADGqNQA3rTkAPqo/AECDPwAumUUAQIJCAEWOSABDm0gAVYpTAFyP
        WABGm1cAV5hXAGGCVABnhloASa5NAEa0SQBItk0ATLFUAE27UgBQu1UAXrNeAFS9WABZu1wASYVgAGeY
        aAB+m34AV6hqAF++YwBlqmYAbKhrAGK1YgBirnkAeb9+AFTAWQBYwVwAXsZjAGLHaABnyWwAc8J1AHPK
        dgCMhmsACnW0AAB7swADdroACXi7AB14tQARer4AMnSsAD95rQBbZIkAUG6cAFp8mwBbfa0AAnvCAAt9
        wwARfcAA3XWFANN8hQDfd4gAdqaBAHapgwBMi7MAUJK2AGODtwBqhrcAZ5e1AHKeuQB5oLsAA4TDAAiB
        wAAAicUAAoPKAA2ByAAAiMgAE4PEABqBwwAWiMEAGYTIABaJygAeiskAAJLNAAOL0wACjtkAAJLRAAOd
        1QAFktsAIYPCACWJxAApisQAI4nMAC2QywA3kMQANZPLACeM0QAqktUAMZTWADWW2AA0md0ABaXdAAC0
        2gADluEABpjkAAec6QAJnuoANpzgADuf4gAFoOUAA6vgAAmg7QAAu+IAA7TsAAej8wAJpfQACaj2AAqo
        +AAFu/MACbr3AAm4+AA9oeQAPqLoAEqWwQBJm80AVpvFAGKiygBkqdMAQ6PiAEyo5wBDpuoARKjsAEur
        7ABRp+IAVqnhAEyt8gBOsPQAULL1AFi38ABRs/gAW7r+AAXC7gADw/IABc71AAfF+AAHyPgABdH0AAHZ
        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
        B///AA///4AP///AH///4H//
</value>
  </data>
</root>